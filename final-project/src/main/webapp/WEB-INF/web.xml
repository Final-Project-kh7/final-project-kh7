<?xml version="1.0" encoding="UTF-8"?>

<!--
	web.xml : 서버가 알아야 할 프로젝트의 운영 방침 설정
	- 웹 모듈 4.0에 맞게 버전 변경
-->

<web-app version="4.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_4_0.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!--
		전역(Global) 설정 파일 정보 등록
		- 스프링의 모든 요소에서 접근 가능한 설정
		- 화면과 관계없는 설정들을 보관하는 파일
		- param-name은 반드시 contextConfigLocation이어야 한다.
		- param-value에는 설정 파일의 위치를 적으며, 여러 개 작성 가능
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!--
		프로젝트에 존재하는 여러 개의 설정 파일들을 상호 연결해주는 도구 등록
		- root-context가 servlet-context보다 상위 설정 파일이다.
		- servlet-context에서는 root-context의 내용을 이용할 수 있다.
		- 반대는 안 된다.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!--
		스프링에서 가장 중요한 설정
		- 스프링은 중앙에서 모든 것을 통제하는 서블릿이 한 개 존재한다.
		- 이름은 DispatcherServlet이다.
		- 아래 설정을 통해 현재 프로젝트가 구동될 때 DispatcherServlet이 실행되도록 만든다.
		- servlet에는 서블릿 등록 정보를 작성
			- servlet-name은 서블릿의 이름(주소 연결 시 사용)
			- servlet-class는 서블릿의 실제 경로
			- init-param은 시작 시 알아야 할 설정 내용
				- DispatcherServlet이 구동하기 위해서 알아야 하는 설정 파일을 등록
				- param-name은 반드시 contextConfigLocation이어야 한다.
				- param-value에는 설정 파일의 위치를 등록
			- load-on-startup은 서버 실행 시 시작 우선 순위를 결정
		- servlet-mapping에는 서블릿에 할당할 주소를 설정
			- url-pattenr에 /*로 작성하는 것과 /로 작성하는 것은 차이가 있다.
			- /*는 전체 주소를 의미(특정 주소를 제외할 수 없음. 무조건 전체)
			- /는 전체 주소를 의미(설정을 통해 특정 주소를 제외할 수 있음)
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!--
		모든 요청을 UTF-8로 변경하는 필터를 등록
		- 내가 만들어서 등록해도 되지만 스프링에서 제공하는 필터를 등록
		- org.springframework.web.filter.CharacterEncodingFilter 
	-->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 
		SpringFilter 등록
		- 필터를 직접 등록하는 것이 아니라 대행 클래스를 등록(ex : 스턴트맨)
		- 프록시 필터
		- org.springframework.web.filter.DelegatingFilterProxy
		- filter-name에 등록할 Filter Bean의 ID를 적는다(spring explorer에서 확인)
		- 반드시 root-context.xml에 등록된 Spring Bean이어야 한다.

	<filter>
		<filter-name>springFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springFilter</filter-name>
		<url-pattern>/test2/*</url-pattern>
	</filter-mapping>
	-->
</web-app>
