<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<!-- 회원가입 -->
	<insert id="join" parameterType="MemberDto">
		insert into member values(
			member_seq.nextval, #{memberId}, #{memberPw}, 
			#{memberNick}, #{memberEmail}, #{memberName}, 
			#{memberBirth}, #{memberGender},
			#{memberGrade}, #{memberIntro}, #{memberState}
		)
	</insert>
	
	<!-- 로그인 -->
	<select id="login" parameterType="MemberDto" resultType="MemberDto">
		select * from member where 
			member_id = #{memberId} 
			and member_pw = #{memberPw}
	</select>
	
	<!-- 회원정보 조회(회원번호로) -->
	<select id="findInfo" parameterType="int" resultType="MemberDto">
		select member_nick, member_email, member_name, member_gender, member_grade, member_intro, member_state
		from member where member_no = #{memberNo}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findId" parameterType="MemberDto" resultType="MemberDto">
		select member_id, member_email, member_name from member where 
		member_email = #{memberEmail} and member_name = #{memberName}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPw" parameterType="MemberVo" resultType="MemberVo"> 
		select member_id, member_email, member_no from member where 
		member_email = #{memberEmail} and member_id = #{memberId}
	</select>
	
	<!-- 닉네임으로 회원 조회 -->
	<select id="findWithNick" parameterType="String" resultType="MemberDto"> 
		select * from member where member_nick = #{memberNick}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePw" parameterType="MemberDto">
		update member set member_pw = #{memberPw} where member_id = #{memberId}
	</update>
	
	<!-- 마이페이지 수정 -->
	<update id="editProfile" parameterType="MemberDto">
		update member set member_name = #{memberName}, member_nick = #{memberNick},
		member_intro = #{memberIntro}, member_email = #{memberEmail}, 
		member_gender = #{memberGender} where member_no = #{memberNo}
	</update>
	
	<!-- 아이디 중복 체크 -->
	<select id="idCheck" parameterType="MemberVo" resultType="int">
		select count(*) from member where member_id = #{memberId}
	</select>
	
	<!-- 프로필 편집 닉네임 중복 체크 -->
	<select id="pNickCheck" parameterType="MemberVo" resultType="MemberVo">
		select member_nick from member where member_nick = #{memberNick}
	</select>
	
	<!-- 회원가입 닉네임 중복 체크 -->
	<select id="jNickCheck" parameterType="MemberVo" resultType="int">
		select count(*) from member where member_nick = #{memberNick}
	</select>
	
	<!-- 회원 탈퇴 -->
	<delete id="exit" parameterType="MemberVo">
		delete from member where member_id = #{memberId}
	</delete>
	
	<!-- 회원 정지 -->
	<update id="block" parameterType="int">
		update member set member_state = '정지' where member_no = #{memberNo}
	</update>
	
	<!-- 회원 정지 해제 -->
	<update id="unblock" parameterType="int">
		update member set member_state = '정상' where member_no = #{memberNo}
	</update>
	
	<select id="getCount" resultType="int">
		select count(*) from member
	</select>
	<select id="getBlockCount" resultType="int">
		select count(*) from member where member_state='정지'
	</select>
	<select id="getUnBlockCount" resultType="int">
		select count(*) from member where member_state='정상'
	</select>
	<select id="searchPreview" parameterType="String" resultType="MemberDto">
		select * from member where instr(member_name,#{keyword}) > 0 or instr(member_nick,#{keyword}) > 0 or instr(member_id,#{keyword}) > 0
	</select>
	
	<select id="list" parameterType="PageVo" resultType="MemberVo">
		select * from (
			select rownum rn, tmp.* from (
				select member.*,NVL(R.report_count, 0) report_count from member
				left join 
				(select count(*) report_count, member_no from
					(select p.member_no member_no from photostory_report pr
					    inner join photostory p
					    on pr.photostory_no = p.photostory_no
					    UNION All
					select c.member_no member_no from comment_report cr
					    inner join photostory_comment c
					    on cr.photostory_comment_no = c.photostory_comment_no) cnt
					    GROUP by cnt.member_no) R
				    on r.member_no = member.member_no
				    order by report_count desc
			) tmp
		) where rn between #{startRow} and #{endRow}
	</select>
	<select id="blockList" parameterType="PageVo" resultType="MemberVo">
		select * from (
			select rownum rn, tmp.* from (
				select member.*,NVL(R.report_count, 0) report_count from member
				left join 
				(select count(*) report_count, member_no from
					(select p.member_no member_no from photostory_report pr
					    inner join photostory p
					    on pr.photostory_no = p.photostory_no
					    UNION All
					select c.member_no member_no from comment_report cr
					    inner join photostory_comment c
					    on cr.photostory_comment_no = c.photostory_comment_no) cnt
					    GROUP by cnt.member_no) R
				    on r.member_no = member.member_no 
				        where member.member_state='정지'
				        				    order by report_count desc
			) tmp
		) where rn between #{startRow} and #{endRow}
	</select>
	<select id="unBlockList" parameterType="PageVo" resultType="MemberVo">
		select * from (
			select rownum rn, tmp.* from (
				select member.*,NVL(R.report_count, 0) report_count from member
				left join 
				(select count(*) report_count, member_no from
					(select p.member_no member_no from photostory_report pr
					    inner join photostory p
					    on pr.photostory_no = p.photostory_no
					    UNION All
					select c.member_no member_no from comment_report cr
					    inner join photostory_comment c
					    on cr.photostory_comment_no = c.photostory_comment_no) cnt
					    GROUP by cnt.member_no) R
				    on r.member_no = member.member_no 
				    where member.member_state='정상'
				    				    order by report_count desc
			) tmp
		) where rn between #{startRow} and #{endRow}
	</select>
</mapper>